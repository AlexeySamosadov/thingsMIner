/// <reference types="node" />
import { Address, Cell, Contract, ContractProvider, MessageRelaxed, Sender, SendMode } from '@ton/core';
import { BatchSender } from './BatchSender';
export declare class HighloadWalletV2 implements Contract {
    readonly publicKey: Buffer;
    readonly workchain: number;
    readonly walletId: number;
    static readonly CODE = "te6ccgEBCQEA5QABFP8A9KQT9LzyyAsBAgEgAgMCAUgEBQHq8oMI1xgg0x/TP/gjqh9TILnyY+1E0NMf0z/T//QE0VNggED0Dm+hMfJgUXO68qIH+QFUEIf5EPKjAvQE0fgAf44WIYAQ9HhvpSCYAtMH1DAB+wCRMuIBs+ZbgyWhyEA0gED0Q4rmMQHIyx8Tyz/L//QAye1UCAAE0DACASAGBwAXvZznaiaGmvmOuF/8AEG+X5dqJoaY+Y6Z/p/5j6AmipEEAgegc30JjJLb/JXdHxQANCCAQPSWb6VsEiCUMFMDud4gkzM2AZJsIeKz";
    readonly address: Address;
    readonly init: {
        code: Cell;
        data: Cell;
    };
    constructor(publicKey: Buffer, workchain?: number, walletId?: number);
    sendDeploy(provider: ContractProvider, via: Sender, value: bigint): Promise<void>;
    getBalance(provider: ContractProvider): Promise<bigint>;
    getProcessed(provider: ContractProvider, queryId: bigint): Promise<boolean>;
    generateQueryId(timeout?: number, randomId?: number): bigint;
    /**
     * Send signed transfer
     */
    send(provider: ContractProvider, message: Cell): Promise<void>;
    /**
     * Sign and send transfer
     */
    sendTransfer(provider: ContractProvider, args: {
        queryId: bigint;
        messages: [MessageRelaxed, SendMode][];
        secretKey: Buffer;
    }): Promise<void>;
    /**
     * Create signed transfer
     */
    createTransfer(args: {
        queryId: bigint;
        messages: [MessageRelaxed, SendMode][];
        secretKey: Buffer;
    }): Cell;
    /**
     * Create a default sender (sends 1 message per time)
     */
    sender(provider: ContractProvider, secretKey: Buffer): Sender;
    /**
     * Create a batch sender (sends as many messages as needed).
     * Non-compatible with `Blockchain` from `@ton/sandbox`.
     */
    batchSender(provider: ContractProvider, secretKey: Buffer, batchSize: number): BatchSender;
}
